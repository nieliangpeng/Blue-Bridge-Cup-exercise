 全排列在很多程序都有应用，是一个很常见的算法，常规的算法是一种递归的算法，这种算法的得到基于以下的分析思路。  给定一个具有n个元素的集合（n>=1），要求输出这个集合中元素的所有可能的排列。

        一、递归实现

        例如，如果集合是{a,b,c},那么这个集合中元素的所有排列是{(a,b,c),(a,c,b),(b,a,c),(b,c,a),(c,a,b),(c,b,a)}，显然，给定n个元素共有n!种不同的排列，如果给定集合是{a,b,c,d}，可以用下面给出的简单算法产生其所有排列，即集合(a,b,c,d)的所有排列有下面的排列组成：

    （1）以a开头后面跟着(b,c,d)的排列

    （2）以b开头后面跟着(a,c,d)的排列

    （3）以c开头后面跟着(a,b,d)的排列

    （4）以d开头后面跟着(a,b,c)的排列，这显然是一种递归的思路，于是我们得到了以下的实现：

[cpp] view plain copy
#include "iostream"  
using namespace std;  
  
void permutation(char* a,int k,int m)  
{  
    int i,j;  
    if(k == m)  
    {  
        for(i=0;i<=m;i++)  
            cout<<a[i];  
        cout<<endl;  
    }  
    else  
    {  
        for(j=k;j<=m;j++)  
        {  
            swap(a[j],a[k]);     //交换顺序
            permutation(a,k+1,m);  
            swap(a[j],a[k]);     //换回原来的顺序，每一次执行了一次最外层的循环，都保持数组的顺序不变；这样便于排序；
                                 
        }  
    }  
}  
int main(void)  
{  
    char a[] = "abc";  
    cout<<a<<"所有全排列的结果为："<<endl;  
    permutation(a,0,2);  
    system("pause");  
    return 0;  
}  
